grammar jacamoide.xtext.jcm.Jcm hidden(WS, ML_COMMENT) //SL_COMMENT

generate jcm "http://www.xtext.jacamoide/jcm/Jcm"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

JcmModel: (EOL)* 
			'mas' name=ATOM (uses=DUses)? (EOL)* '{' (EOL)* 
				( agent+=Agent )* 
				( workspace+=Workspace )* 
				( organisation+=Organisation )* 
				( ( dclassPath+=DClassPath | 
					dAslPath+=DAslPath | 
					dPlatform+=DPlatform | 
					dNode+=DNode
				) )* 
			'}' (EOL)* ;

DUses: 'uses' fileName+=FileName (',' fileName+=FileName)* ;
DClassPath:{DClassPath} 'class-path' ':' ( classPath+=FileName (EOL | ',' )+ )*;
DAslPath:{DAslPath} 'asl-path' ':' ( aslPath+=FileName (EOL | ',' )+ )*;
DPlatform:{DPlatform} 'platform' ':' ( platform+=ClassDef (EOL | ',' )+ )*;
DNode: 'node' name=ATOM ( 'running' )? ( '@' host=Host )? ( EOL | ',' )+;
			
Agent:	'agent' name=ATOM ( ':' source+=FileName )? ( '{' (EOL)* ( ( 
			'instances' ':' ( instances+=INT_LITERAL ( EOL | ',' )+ | ( instancesAtom+=ATOM ( EOL | ',' )+ )* ) | 
			'node' ':' node+=ATOM ( EOL )+ | 
			'ag-arch' ':' ( agArch+=ClassDef ( EOL | ',' )+ )* | 
			'ag-class' ':' agClass+=ClassDef ( EOL )+ | 
			'ag-bb-class' ':' agbbClass+=ClassDef ( EOL )+ | 
			'beliefs' ':' ( beliefs+=Literal ( EOL | ',' )+ )* | 
			'goals' ':' ( goals+=Literal ( EOL | ',' )+ )* | 
			'focus' ':' ( focus+=ATOM ( '@' focusNode+=ATOM )? ( EOL | ',' )+ )* | 
			'join' ':' ( join+=ATOM ( '@' joinNode+=ATOM )? ( EOL | ',' )+ )* | 
			'roles' ':' ( role+=ATOM 'in' group+=ATOM ( '@' groupNode+=ATOM )? ( EOL | ',' )+ )* | 
			'debug' ':' debug+=Literal ( EOL | ',' )+ | 
			'verbose' ':' verbose+=INT_LITERAL (EOL )+ |
			'nrcbp' ':' nrcbp+=INT_LITERAL (EOL )+ |      
			'events' ':' ('discard' | 'requeue' | 'retrieve') (EOL )+ |
			'intBels' ':' ('sameFocus'  | 'newFocus') (EOL )+ |
			
			other+=ATOM ":" ( string+=STRING | val+=INT_LITERAL | literal+=Literal | val_real+=REAL_LITERAL ) ( EOL )+
) )* '}' )? ( EOL )* ;

Workspace: 'workspace' name=ATOM '{' ( EOL )* 
		( 
			artifact+=Artifact | 
			'agents' ':' ( ( agent+=ATOM | '*' ) ( EOL | ',' )+ )* |
			'debug' ( EOL )+ |  
			node+=ONode
		)* '}' ( EOL )*
;


Artifact: 'artifact' name=ATOM ':' classDef=ClassDef ( '{' ( EOL )* 
	( 'focused-by' ":" ( ( agent+=ATOM | '*' ) ( EOL | ',' )+ )* )? '}'
)? ( EOL )* ;

Organisation: 'organisation' name=ATOM fileName=OFileName? '{' ( EOL )* ( ( 
		group+=Group | 
		scheme+=Scheme | 
		agents+=OAgents | 
		node+=ONode | 
		other+=OOthers
) )* "}" ( EOL )* ;

OFileName: ':' name=FileName;
ONode: 'node' ':' name=ATOM ( EOL )+;
OAgents:{OAgents} 'agents' ':' ( ( agent+=ATOM | '*' ) (EOL | ',' )+ )*;
OOthers: name=ATOM ':' ( string+=STRING | val+=INT_LITERAL | literal+=Literal | val_real+=REAL_LITERAL ) (EOL)+;

Group:	'group' name=ATOM ':' kind=ATOM ( '{' ( EOL )* ( 
				( group+=Group | 
				  'responsible-for' ":" responsibleFor+=ATOM ( EOL )+ | 
				  'owner' ':' owner+=ATOM (EOL)+ |
				  'debug' ( EOL )+ | 
				  other+=ATOM  ':' ( string+=STRING | val+=INT_LITERAL | literal+=Literal | val_real+=REAL_LITERAL ) (EOL)+ |  
				  'players' ':' ( agent+=ATOM role+=ATOM ( EOL | ',' )+ )*
				)
)* "}" )? ( EOL )* ;

Scheme:	'scheme' name=ATOM ':' kind=ATOM ( '{' ( EOL )* ( 
	'debug' ( EOL )+ | 
	'owner' ':' owner+=ATOM (EOL)+ |
	other+=ATOM  ":" ( string+=STRING | val+=INT_LITERAL | literal+=Literal | val_real+=REAL_LITERAL ) (EOL)+ 
)* "}" )? ( EOL )* ;

Host: (name=ATOM | string=STRING | ip=IP) ( ':' val=INT_LITERAL )? ;

FileName:{FileName} (( '/' | '-' | '.' | '..' | name+=ATOM  )+ | string=STRING) ;

ClassDef: infrastructure=FQN ( '(' ( ( parameter+=Parameter ) ( ',' ( parameter+=Parameter ) )* )? ')' )? ;

Parameter: ( classDef=ClassDef | val=INT_LITERAL | val_real+=REAL_LITERAL | string=STRING | listParameters=ListParameters ) ;

ListParameters: '[' ( parameter+=Parameter ) ( ',' parameter+=Parameter )* ']' ;

Literal:{Literal} ( ( ( '~' )? ( pred=Pred | var=Var ) ) | 'true' | 'false' ) ;

Pred:{Pred} ( atom=ATOM | 'begin' | 'end' ) ( '(' terms=Terms ')' )? ( list=List )? ;

Terms:	term+=Term ( ',' term+=Term )* ;

Term: ( list=List | literal=Literal | string=STRING | val=INT_LITERAL | val_real+=REAL_LITERAL ) ;

List:{List} '[' ( term+=Term ( ',' term+=Term )* ( '|' ( var=VART | unnamedvar=UNNAMEDVART | list=List ) )? )? ']' ;

Var:	( var=VART | unnamedvar=UNNAMEDVART ) ( list=List )? ;

EOL:
	NEWLINE | SL_COMMENT;

FQN returns ecore::EString : (VART | ATOM) ('.' (VART | ATOM))*;

terminal IP:  INT_LITERAL+ '.' INT_LITERAL+ '.' INT_LITERAL+ '.' INT_LITERAL+ ;

terminal ATOM: (LCLETTER | '.' CHAR) (CHAR | '.' CHAR)* ;
terminal VART: UCLETTER CHAR* ;
terminal UNNAMEDVART: '_' CHAR*;

terminal fragment CHAR: (LETTER | DIGIT | "_");
terminal fragment LETTER: (LCLETTER | UCLETTER);
terminal fragment LCLETTER: 'a'..'z';
terminal fragment UCLETTER: 'A'..'Z';
terminal fragment DIGIT: '0'..'9';

//terminal EOL: '\n';

terminal STRING: '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"';

terminal INT_LITERAL returns ecore::EInt : IntegerNumber;
terminal REAL_LITERAL returns ecore::EDouble : IntegerNumber? '.' IntegerNumber;

terminal fragment IntegerNumber
    :   
	    	'0' 
	    |   '1'..'9' ('0'..'9')*    
	    |   '0' ('0'..'7')+         
	    |   HexPrefix HexDigit+        
    ;

terminal fragment HexPrefix : '0x' | '0X' ;
        
terminal fragment HexDigit : ('0'..'9'|'a'..'f'|'A'..'F') ;

/********************  Skip whitespace RULE ********************/
terminal WS : (' '|'\t'|'\r')+;	

/********************  Skip multi-line comments RULE ********************/
terminal ML_COMMENT : '/*' -> '*/';

/********************  Skip single-line comments RULE ********************/
//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?;
	
terminal NEWLINE:
	('\r'? '\n');

